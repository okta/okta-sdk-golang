{{> partials.copyHeader }}

package okta

import (
	"net/http"
	"regexp"

	"github.com/okta/okta-sdk-golang/okta/cache"
)

const Version = "0.1.0"

type Client struct {
	config *Config

	requestExecutor *RequestExecutor

	resource resource

	{{getClientTagResources operations}}
}

type resource struct {
	client *Client
}

func NewClient(config *Config, httpClient *http.Client, cacheManager cache.Cache) *Client {
	if config == nil {
		config = NewConfig()
	}


	var oktaCache cache.Cache
	if !config.Okta.Client.Cache.Enabled {
		oktaCache = cache.NewNoOpCache()
	} else {
		if cacheManager == nil {
			oktaCache = cache.NewGoCache(config.Okta.Client.Cache.DefaultTtl,
			config.Okta.Client.Cache.DefaultTti)
		} else {
			oktaCache = cacheManager
		}
	}

	c := &Client{}
	c.config = config
	// Remove / if it is there to ensure URL consistency. See issue #14.
	rx := regexp.MustCompile("/+?$")
	c.config.Okta.Client.OrgUrl = rx.ReplaceAllString(c.config.Okta.Client.OrgUrl, "")
	c.requestExecutor = NewRequestExecutor(nil, oktaCache, config)

	c.resource.client = c

	{{{getNewClientTagProps operations}}}
	return c
}

func (c *Client) GetConfig() *Config {
	return c.config
}

func (c *Client) GetRequestExecutor() *RequestExecutor {
	return c.requestExecutor
}
