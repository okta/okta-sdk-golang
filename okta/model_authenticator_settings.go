/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 5.1.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
)

// AuthenticatorSettings struct for AuthenticatorSettings
type AuthenticatorSettings struct {
	AllowedFor             *string         `json:"allowedFor,omitempty"`
	AppInstanceId          *string         `json:"appInstanceId,omitempty"`
	ChannelBinding         *ChannelBinding `json:"channelBinding,omitempty"`
	Compliance             *Compliance     `json:"compliance,omitempty"`
	TokenLifetimeInMinutes *int32          `json:"tokenLifetimeInMinutes,omitempty"`
	// User verification setting
	UserVerification     *string `json:"userVerification,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AuthenticatorSettings AuthenticatorSettings

// NewAuthenticatorSettings instantiates a new AuthenticatorSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthenticatorSettings() *AuthenticatorSettings {
	this := AuthenticatorSettings{}
	return &this
}

// NewAuthenticatorSettingsWithDefaults instantiates a new AuthenticatorSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthenticatorSettingsWithDefaults() *AuthenticatorSettings {
	this := AuthenticatorSettings{}
	return &this
}

// GetAllowedFor returns the AllowedFor field value if set, zero value otherwise.
func (o *AuthenticatorSettings) GetAllowedFor() string {
	if o == nil || o.AllowedFor == nil {
		var ret string
		return ret
	}
	return *o.AllowedFor
}

// GetAllowedForOk returns a tuple with the AllowedFor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticatorSettings) GetAllowedForOk() (*string, bool) {
	if o == nil || o.AllowedFor == nil {
		return nil, false
	}
	return o.AllowedFor, true
}

// HasAllowedFor returns a boolean if a field has been set.
func (o *AuthenticatorSettings) HasAllowedFor() bool {
	if o != nil && o.AllowedFor != nil {
		return true
	}

	return false
}

// SetAllowedFor gets a reference to the given string and assigns it to the AllowedFor field.
func (o *AuthenticatorSettings) SetAllowedFor(v string) {
	o.AllowedFor = &v
}

// GetAppInstanceId returns the AppInstanceId field value if set, zero value otherwise.
func (o *AuthenticatorSettings) GetAppInstanceId() string {
	if o == nil || o.AppInstanceId == nil {
		var ret string
		return ret
	}
	return *o.AppInstanceId
}

// GetAppInstanceIdOk returns a tuple with the AppInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticatorSettings) GetAppInstanceIdOk() (*string, bool) {
	if o == nil || o.AppInstanceId == nil {
		return nil, false
	}
	return o.AppInstanceId, true
}

// HasAppInstanceId returns a boolean if a field has been set.
func (o *AuthenticatorSettings) HasAppInstanceId() bool {
	if o != nil && o.AppInstanceId != nil {
		return true
	}

	return false
}

// SetAppInstanceId gets a reference to the given string and assigns it to the AppInstanceId field.
func (o *AuthenticatorSettings) SetAppInstanceId(v string) {
	o.AppInstanceId = &v
}

// GetChannelBinding returns the ChannelBinding field value if set, zero value otherwise.
func (o *AuthenticatorSettings) GetChannelBinding() ChannelBinding {
	if o == nil || o.ChannelBinding == nil {
		var ret ChannelBinding
		return ret
	}
	return *o.ChannelBinding
}

// GetChannelBindingOk returns a tuple with the ChannelBinding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticatorSettings) GetChannelBindingOk() (*ChannelBinding, bool) {
	if o == nil || o.ChannelBinding == nil {
		return nil, false
	}
	return o.ChannelBinding, true
}

// HasChannelBinding returns a boolean if a field has been set.
func (o *AuthenticatorSettings) HasChannelBinding() bool {
	if o != nil && o.ChannelBinding != nil {
		return true
	}

	return false
}

// SetChannelBinding gets a reference to the given ChannelBinding and assigns it to the ChannelBinding field.
func (o *AuthenticatorSettings) SetChannelBinding(v ChannelBinding) {
	o.ChannelBinding = &v
}

// GetCompliance returns the Compliance field value if set, zero value otherwise.
func (o *AuthenticatorSettings) GetCompliance() Compliance {
	if o == nil || o.Compliance == nil {
		var ret Compliance
		return ret
	}
	return *o.Compliance
}

// GetComplianceOk returns a tuple with the Compliance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticatorSettings) GetComplianceOk() (*Compliance, bool) {
	if o == nil || o.Compliance == nil {
		return nil, false
	}
	return o.Compliance, true
}

// HasCompliance returns a boolean if a field has been set.
func (o *AuthenticatorSettings) HasCompliance() bool {
	if o != nil && o.Compliance != nil {
		return true
	}

	return false
}

// SetCompliance gets a reference to the given Compliance and assigns it to the Compliance field.
func (o *AuthenticatorSettings) SetCompliance(v Compliance) {
	o.Compliance = &v
}

// GetTokenLifetimeInMinutes returns the TokenLifetimeInMinutes field value if set, zero value otherwise.
func (o *AuthenticatorSettings) GetTokenLifetimeInMinutes() int32 {
	if o == nil || o.TokenLifetimeInMinutes == nil {
		var ret int32
		return ret
	}
	return *o.TokenLifetimeInMinutes
}

// GetTokenLifetimeInMinutesOk returns a tuple with the TokenLifetimeInMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticatorSettings) GetTokenLifetimeInMinutesOk() (*int32, bool) {
	if o == nil || o.TokenLifetimeInMinutes == nil {
		return nil, false
	}
	return o.TokenLifetimeInMinutes, true
}

// HasTokenLifetimeInMinutes returns a boolean if a field has been set.
func (o *AuthenticatorSettings) HasTokenLifetimeInMinutes() bool {
	if o != nil && o.TokenLifetimeInMinutes != nil {
		return true
	}

	return false
}

// SetTokenLifetimeInMinutes gets a reference to the given int32 and assigns it to the TokenLifetimeInMinutes field.
func (o *AuthenticatorSettings) SetTokenLifetimeInMinutes(v int32) {
	o.TokenLifetimeInMinutes = &v
}

// GetUserVerification returns the UserVerification field value if set, zero value otherwise.
func (o *AuthenticatorSettings) GetUserVerification() string {
	if o == nil || o.UserVerification == nil {
		var ret string
		return ret
	}
	return *o.UserVerification
}

// GetUserVerificationOk returns a tuple with the UserVerification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticatorSettings) GetUserVerificationOk() (*string, bool) {
	if o == nil || o.UserVerification == nil {
		return nil, false
	}
	return o.UserVerification, true
}

// HasUserVerification returns a boolean if a field has been set.
func (o *AuthenticatorSettings) HasUserVerification() bool {
	if o != nil && o.UserVerification != nil {
		return true
	}

	return false
}

// SetUserVerification gets a reference to the given string and assigns it to the UserVerification field.
func (o *AuthenticatorSettings) SetUserVerification(v string) {
	o.UserVerification = &v
}

func (o AuthenticatorSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllowedFor != nil {
		toSerialize["allowedFor"] = o.AllowedFor
	}
	if o.AppInstanceId != nil {
		toSerialize["appInstanceId"] = o.AppInstanceId
	}
	if o.ChannelBinding != nil {
		toSerialize["channelBinding"] = o.ChannelBinding
	}
	if o.Compliance != nil {
		toSerialize["compliance"] = o.Compliance
	}
	if o.TokenLifetimeInMinutes != nil {
		toSerialize["tokenLifetimeInMinutes"] = o.TokenLifetimeInMinutes
	}
	if o.UserVerification != nil {
		toSerialize["userVerification"] = o.UserVerification
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *AuthenticatorSettings) UnmarshalJSON(bytes []byte) (err error) {
	varAuthenticatorSettings := _AuthenticatorSettings{}

	err = json.Unmarshal(bytes, &varAuthenticatorSettings)
	if err == nil {
		*o = AuthenticatorSettings(varAuthenticatorSettings)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &additionalProperties)
	if err == nil {
		delete(additionalProperties, "allowedFor")
		delete(additionalProperties, "appInstanceId")
		delete(additionalProperties, "channelBinding")
		delete(additionalProperties, "compliance")
		delete(additionalProperties, "tokenLifetimeInMinutes")
		delete(additionalProperties, "userVerification")
		o.AdditionalProperties = additionalProperties
	} else {
		return err
	}

	return err
}

type NullableAuthenticatorSettings struct {
	value *AuthenticatorSettings
	isSet bool
}

func (v NullableAuthenticatorSettings) Get() *AuthenticatorSettings {
	return v.value
}

func (v *NullableAuthenticatorSettings) Set(val *AuthenticatorSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthenticatorSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthenticatorSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthenticatorSettings(val *AuthenticatorSettings) *NullableAuthenticatorSettings {
	return &NullableAuthenticatorSettings{value: val, isSet: true}
}

func (v NullableAuthenticatorSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthenticatorSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
