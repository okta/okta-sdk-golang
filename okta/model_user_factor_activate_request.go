/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 2024.06.1
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// model_oneof.mustache
// UserFactorActivateRequest - struct for UserFactorActivateRequest
type UserFactorActivateRequest struct {
	Call              *Call
	Email             *Email
	Sms               *Sms
	TokenSoftwareTotp *TokenSoftwareTotp
	U2f               *U2f
	Webauthn          *Webauthn
	MapmapOfStringAny *map[string]interface{}
}

// CallAsUserFactorActivateRequest is a convenience function that returns Call wrapped in UserFactorActivateRequest
func CallAsUserFactorActivateRequest(v *Call) UserFactorActivateRequest {
	return UserFactorActivateRequest{
		Call: v,
	}
}

// EmailAsUserFactorActivateRequest is a convenience function that returns Email wrapped in UserFactorActivateRequest
func EmailAsUserFactorActivateRequest(v *Email) UserFactorActivateRequest {
	return UserFactorActivateRequest{
		Email: v,
	}
}

// SmsAsUserFactorActivateRequest is a convenience function that returns Sms wrapped in UserFactorActivateRequest
func SmsAsUserFactorActivateRequest(v *Sms) UserFactorActivateRequest {
	return UserFactorActivateRequest{
		Sms: v,
	}
}

// TokenSoftwareTotpAsUserFactorActivateRequest is a convenience function that returns TokenSoftwareTotp wrapped in UserFactorActivateRequest
func TokenSoftwareTotpAsUserFactorActivateRequest(v *TokenSoftwareTotp) UserFactorActivateRequest {
	return UserFactorActivateRequest{
		TokenSoftwareTotp: v,
	}
}

// U2fAsUserFactorActivateRequest is a convenience function that returns U2f wrapped in UserFactorActivateRequest
func U2fAsUserFactorActivateRequest(v *U2f) UserFactorActivateRequest {
	return UserFactorActivateRequest{
		U2f: v,
	}
}

// WebauthnAsUserFactorActivateRequest is a convenience function that returns Webauthn wrapped in UserFactorActivateRequest
func WebauthnAsUserFactorActivateRequest(v *Webauthn) UserFactorActivateRequest {
	return UserFactorActivateRequest{
		Webauthn: v,
	}
}

// map[string]interface{}AsUserFactorActivateRequest is a convenience function that returns map[string]interface{} wrapped in UserFactorActivateRequest
func MapmapOfStringAnyAsUserFactorActivateRequest(v *map[string]interface{}) UserFactorActivateRequest {
	return UserFactorActivateRequest{
		MapmapOfStringAny: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct  CUSTOM
func (dst *UserFactorActivateRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Call
	err = json.Unmarshal(data, &dst.Call)
	if err == nil {
		jsonCall, _ := json.Marshal(dst.Call)
		if string(jsonCall) == "{}" { // empty struct
			dst.Call = nil
		} else {
			match++
		}
	} else {
		dst.Call = nil
	}

	// try to unmarshal data into Email
	err = json.Unmarshal(data, &dst.Email)
	if err == nil {
		jsonEmail, _ := json.Marshal(dst.Email)
		if string(jsonEmail) == "{}" { // empty struct
			dst.Email = nil
		} else {
			match++
		}
	} else {
		dst.Email = nil
	}

	// try to unmarshal data into Sms
	err = json.Unmarshal(data, &dst.Sms)
	if err == nil {
		jsonSms, _ := json.Marshal(dst.Sms)
		if string(jsonSms) == "{}" { // empty struct
			dst.Sms = nil
		} else {
			match++
		}
	} else {
		dst.Sms = nil
	}

	// try to unmarshal data into TokenSoftwareTotp
	err = json.Unmarshal(data, &dst.TokenSoftwareTotp)
	if err == nil {
		jsonTokenSoftwareTotp, _ := json.Marshal(dst.TokenSoftwareTotp)
		if string(jsonTokenSoftwareTotp) == "{}" { // empty struct
			dst.TokenSoftwareTotp = nil
		} else {
			match++
		}
	} else {
		dst.TokenSoftwareTotp = nil
	}

	// try to unmarshal data into U2f
	err = json.Unmarshal(data, &dst.U2f)
	if err == nil {
		jsonU2f, _ := json.Marshal(dst.U2f)
		if string(jsonU2f) == "{}" { // empty struct
			dst.U2f = nil
		} else {
			match++
		}
	} else {
		dst.U2f = nil
	}

	// try to unmarshal data into Webauthn
	err = json.Unmarshal(data, &dst.Webauthn)
	if err == nil {
		jsonWebauthn, _ := json.Marshal(dst.Webauthn)
		if string(jsonWebauthn) == "{}" { // empty struct
			dst.Webauthn = nil
		} else {
			match++
		}
	} else {
		dst.Webauthn = nil
	}

	// try to unmarshal data into MapmapOfStringAny
	err = json.Unmarshal(data, &dst.MapmapOfStringAny)
	if err == nil {
		jsonMapmapOfStringAny, _ := json.Marshal(dst.MapmapOfStringAny)
		if string(jsonMapmapOfStringAny) == "{}" { // empty struct
			dst.MapmapOfStringAny = nil
		} else {
			match++
		}
	} else {
		dst.MapmapOfStringAny = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Call = nil
		dst.Email = nil
		dst.Sms = nil
		dst.TokenSoftwareTotp = nil
		dst.U2f = nil
		dst.Webauthn = nil
		dst.MapmapOfStringAny = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(UserFactorActivateRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(UserFactorActivateRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UserFactorActivateRequest) MarshalJSON() ([]byte, error) {
	if src.Call != nil {
		return json.Marshal(&src.Call)
	}

	if src.Email != nil {
		return json.Marshal(&src.Email)
	}

	if src.Sms != nil {
		return json.Marshal(&src.Sms)
	}

	if src.TokenSoftwareTotp != nil {
		return json.Marshal(&src.TokenSoftwareTotp)
	}

	if src.U2f != nil {
		return json.Marshal(&src.U2f)
	}

	if src.Webauthn != nil {
		return json.Marshal(&src.Webauthn)
	}

	if src.MapmapOfStringAny != nil {
		return json.Marshal(&src.MapmapOfStringAny)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UserFactorActivateRequest) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Call != nil {
		return obj.Call
	}

	if obj.Email != nil {
		return obj.Email
	}

	if obj.Sms != nil {
		return obj.Sms
	}

	if obj.TokenSoftwareTotp != nil {
		return obj.TokenSoftwareTotp
	}

	if obj.U2f != nil {
		return obj.U2f
	}

	if obj.Webauthn != nil {
		return obj.Webauthn
	}

	if obj.MapmapOfStringAny != nil {
		return obj.MapmapOfStringAny
	}

	// all schemas are nil
	return nil
}

type NullableUserFactorActivateRequest struct {
	value *UserFactorActivateRequest
	isSet bool
}

func (v NullableUserFactorActivateRequest) Get() *UserFactorActivateRequest {
	return v.value
}

func (v *NullableUserFactorActivateRequest) Set(val *UserFactorActivateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUserFactorActivateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUserFactorActivateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserFactorActivateRequest(val *UserFactorActivateRequest) *NullableUserFactorActivateRequest {
	return &NullableUserFactorActivateRequest{value: val, isSet: true}
}

func (v NullableUserFactorActivateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserFactorActivateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
