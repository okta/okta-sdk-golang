/*
Okta Admin Management

Testing EventHookAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package okta

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/okta/okta-sdk-golang/v6/okta"
)

func Test_okta_EventHookAPIService(t *testing.T) {

	configuration, err := openapiclient.NewConfiguration()
	require.Nil(t, err)
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test EventHookAPIService ActivateEventHook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var eventHookId string

		resp, httpRes, err := apiClient.EventHookAPI.ActivateEventHook(context.Background(), eventHookId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventHookAPIService CreateEventHook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EventHookAPI.CreateEventHook(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventHookAPIService DeactivateEventHook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var eventHookId string

		resp, httpRes, err := apiClient.EventHookAPI.DeactivateEventHook(context.Background(), eventHookId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventHookAPIService DeleteEventHook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var eventHookId string

		httpRes, err := apiClient.EventHookAPI.DeleteEventHook(context.Background(), eventHookId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventHookAPIService GetEventHook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var eventHookId string

		resp, httpRes, err := apiClient.EventHookAPI.GetEventHook(context.Background(), eventHookId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventHookAPIService ListEventHooks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EventHookAPI.ListEventHooks(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventHookAPIService ReplaceEventHook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var eventHookId string

		resp, httpRes, err := apiClient.EventHookAPI.ReplaceEventHook(context.Background(), eventHookId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventHookAPIService VerifyEventHook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var eventHookId string

		resp, httpRes, err := apiClient.EventHookAPI.VerifyEventHook(context.Background(), eventHookId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
