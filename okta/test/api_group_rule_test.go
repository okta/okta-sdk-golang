/*
Okta Admin Management

Testing GroupRuleAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package okta

import (
	"context"
	"testing"

	openapiclient "github.com/okta/okta-sdk-golang/v6/okta"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_okta_GroupRuleAPIService(t *testing.T) {

	configuration, err := openapiclient.NewConfiguration()
	require.Nil(t, err)
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test GroupRuleAPIService ActivateGroupRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var groupRuleId string

		httpRes, err := apiClient.GroupRuleAPI.ActivateGroupRule(context.Background(), groupRuleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupRuleAPIService CreateGroupRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.GroupRuleAPI.CreateGroupRule(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupRuleAPIService DeactivateGroupRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var groupRuleId string

		httpRes, err := apiClient.GroupRuleAPI.DeactivateGroupRule(context.Background(), groupRuleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupRuleAPIService DeleteGroupRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var groupRuleId string

		httpRes, err := apiClient.GroupRuleAPI.DeleteGroupRule(context.Background(), groupRuleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupRuleAPIService GetGroupRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var groupRuleId string

		resp, httpRes, err := apiClient.GroupRuleAPI.GetGroupRule(context.Background(), groupRuleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupRuleAPIService ListGroupRules", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.GroupRuleAPI.ListGroupRules(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupRuleAPIService ReplaceGroupRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var groupRuleId string

		resp, httpRes, err := apiClient.GroupRuleAPI.ReplaceGroupRule(context.Background(), groupRuleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
