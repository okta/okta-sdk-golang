/*
Okta Admin Management

Testing IdentitySourceAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package okta

import (
	"context"
	"testing"

	openapiclient "github.com/okta/okta-sdk-golang/v6/okta"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_okta_IdentitySourceAPIService(t *testing.T) {

	configuration, err := openapiclient.NewConfiguration()
	require.Nil(t, err)
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test IdentitySourceAPIService CreateIdentitySourceSession", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var identitySourceId string

		resp, httpRes, err := apiClient.IdentitySourceAPI.CreateIdentitySourceSession(context.Background(), identitySourceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentitySourceAPIService DeleteIdentitySourceSession", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var identitySourceId string
		var sessionId string

		httpRes, err := apiClient.IdentitySourceAPI.DeleteIdentitySourceSession(context.Background(), identitySourceId, sessionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentitySourceAPIService GetIdentitySourceSession", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var identitySourceId string
		var sessionId string

		resp, httpRes, err := apiClient.IdentitySourceAPI.GetIdentitySourceSession(context.Background(), identitySourceId, sessionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentitySourceAPIService ListIdentitySourceSessions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var identitySourceId string

		resp, httpRes, err := apiClient.IdentitySourceAPI.ListIdentitySourceSessions(context.Background(), identitySourceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentitySourceAPIService StartImportFromIdentitySource", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var identitySourceId string
		var sessionId string

		resp, httpRes, err := apiClient.IdentitySourceAPI.StartImportFromIdentitySource(context.Background(), identitySourceId, sessionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentitySourceAPIService UploadIdentitySourceDataForDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var identitySourceId string
		var sessionId string

		httpRes, err := apiClient.IdentitySourceAPI.UploadIdentitySourceDataForDelete(context.Background(), identitySourceId, sessionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentitySourceAPIService UploadIdentitySourceDataForUpsert", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var identitySourceId string
		var sessionId string

		httpRes, err := apiClient.IdentitySourceAPI.UploadIdentitySourceDataForUpsert(context.Background(), identitySourceId, sessionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentitySourceAPIService UploadIdentitySourceGroupMembershipsForDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var identitySourceId string
		var sessionId string

		httpRes, err := apiClient.IdentitySourceAPI.UploadIdentitySourceGroupMembershipsForDelete(context.Background(), identitySourceId, sessionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentitySourceAPIService UploadIdentitySourceGroupMembershipsForUpsert", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var identitySourceId string
		var sessionId string

		httpRes, err := apiClient.IdentitySourceAPI.UploadIdentitySourceGroupMembershipsForUpsert(context.Background(), identitySourceId, sessionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentitySourceAPIService UploadIdentitySourceGroupsDataForDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var identitySourceId string
		var sessionId string

		httpRes, err := apiClient.IdentitySourceAPI.UploadIdentitySourceGroupsDataForDelete(context.Background(), identitySourceId, sessionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentitySourceAPIService UploadIdentitySourceGroupsForUpsert", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var identitySourceId string
		var sessionId string

		httpRes, err := apiClient.IdentitySourceAPI.UploadIdentitySourceGroupsForUpsert(context.Background(), identitySourceId, sessionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
