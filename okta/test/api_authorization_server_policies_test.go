/*
Okta Admin Management

Testing AuthorizationServerPoliciesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package okta

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/okta/okta-sdk-golang/v6/okta"
)

func Test_okta_AuthorizationServerPoliciesAPIService(t *testing.T) {

	configuration, err := openapiclient.NewConfiguration()
	require.Nil(t, err)
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AuthorizationServerPoliciesAPIService ActivateAuthorizationServerPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authServerId string
		var policyId string

		httpRes, err := apiClient.AuthorizationServerPoliciesAPI.ActivateAuthorizationServerPolicy(context.Background(), authServerId, policyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorizationServerPoliciesAPIService CreateAuthorizationServerPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authServerId string

		resp, httpRes, err := apiClient.AuthorizationServerPoliciesAPI.CreateAuthorizationServerPolicy(context.Background(), authServerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorizationServerPoliciesAPIService DeactivateAuthorizationServerPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authServerId string
		var policyId string

		httpRes, err := apiClient.AuthorizationServerPoliciesAPI.DeactivateAuthorizationServerPolicy(context.Background(), authServerId, policyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorizationServerPoliciesAPIService DeleteAuthorizationServerPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authServerId string
		var policyId string

		httpRes, err := apiClient.AuthorizationServerPoliciesAPI.DeleteAuthorizationServerPolicy(context.Background(), authServerId, policyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorizationServerPoliciesAPIService GetAuthorizationServerPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authServerId string
		var policyId string

		resp, httpRes, err := apiClient.AuthorizationServerPoliciesAPI.GetAuthorizationServerPolicy(context.Background(), authServerId, policyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorizationServerPoliciesAPIService ListAuthorizationServerPolicies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authServerId string

		resp, httpRes, err := apiClient.AuthorizationServerPoliciesAPI.ListAuthorizationServerPolicies(context.Background(), authServerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorizationServerPoliciesAPIService ReplaceAuthorizationServerPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authServerId string
		var policyId string

		resp, httpRes, err := apiClient.AuthorizationServerPoliciesAPI.ReplaceAuthorizationServerPolicy(context.Background(), authServerId, policyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
