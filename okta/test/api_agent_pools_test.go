/*
Okta Admin Management

Testing AgentPoolsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package okta

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/okta/okta-sdk-golang/v6/okta"
)

func Test_okta_AgentPoolsAPIService(t *testing.T) {

	configuration, err := openapiclient.NewConfiguration()
	require.Nil(t, err)
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AgentPoolsAPIService ActivateAgentPoolsUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var poolId string
		var updateId string

		resp, httpRes, err := apiClient.AgentPoolsAPI.ActivateAgentPoolsUpdate(context.Background(), poolId, updateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentPoolsAPIService CreateAgentPoolsUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var poolId string

		resp, httpRes, err := apiClient.AgentPoolsAPI.CreateAgentPoolsUpdate(context.Background(), poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentPoolsAPIService DeactivateAgentPoolsUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var poolId string
		var updateId string

		resp, httpRes, err := apiClient.AgentPoolsAPI.DeactivateAgentPoolsUpdate(context.Background(), poolId, updateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentPoolsAPIService DeleteAgentPoolsUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var poolId string
		var updateId string

		httpRes, err := apiClient.AgentPoolsAPI.DeleteAgentPoolsUpdate(context.Background(), poolId, updateId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentPoolsAPIService GetAgentPoolsUpdateInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var poolId string
		var updateId string

		resp, httpRes, err := apiClient.AgentPoolsAPI.GetAgentPoolsUpdateInstance(context.Background(), poolId, updateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentPoolsAPIService GetAgentPoolsUpdateSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var poolId string

		resp, httpRes, err := apiClient.AgentPoolsAPI.GetAgentPoolsUpdateSettings(context.Background(), poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentPoolsAPIService ListAgentPools", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AgentPoolsAPI.ListAgentPools(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentPoolsAPIService ListAgentPoolsUpdates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var poolId string

		resp, httpRes, err := apiClient.AgentPoolsAPI.ListAgentPoolsUpdates(context.Background(), poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentPoolsAPIService PauseAgentPoolsUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var poolId string
		var updateId string

		resp, httpRes, err := apiClient.AgentPoolsAPI.PauseAgentPoolsUpdate(context.Background(), poolId, updateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentPoolsAPIService ResumeAgentPoolsUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var poolId string
		var updateId string

		resp, httpRes, err := apiClient.AgentPoolsAPI.ResumeAgentPoolsUpdate(context.Background(), poolId, updateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentPoolsAPIService RetryAgentPoolsUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var poolId string
		var updateId string

		resp, httpRes, err := apiClient.AgentPoolsAPI.RetryAgentPoolsUpdate(context.Background(), poolId, updateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentPoolsAPIService StopAgentPoolsUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var poolId string
		var updateId string

		resp, httpRes, err := apiClient.AgentPoolsAPI.StopAgentPoolsUpdate(context.Background(), poolId, updateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentPoolsAPIService UpdateAgentPoolsUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var poolId string
		var updateId string

		resp, httpRes, err := apiClient.AgentPoolsAPI.UpdateAgentPoolsUpdate(context.Background(), poolId, updateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentPoolsAPIService UpdateAgentPoolsUpdateSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var poolId string

		resp, httpRes, err := apiClient.AgentPoolsAPI.UpdateAgentPoolsUpdateSettings(context.Background(), poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
