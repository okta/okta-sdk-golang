/*
Okta Admin Management

Testing OAuth2ResourceServerCredentialsKeysAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package okta

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/okta/okta-sdk-golang/v6/okta"
)

func Test_okta_OAuth2ResourceServerCredentialsKeysAPIService(t *testing.T) {

	configuration, err := openapiclient.NewConfiguration()
	require.Nil(t, err)
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test OAuth2ResourceServerCredentialsKeysAPIService ActivateOAuth2ResourceServerJsonWebKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authServerId string
		var keyId string

		resp, httpRes, err := apiClient.OAuth2ResourceServerCredentialsKeysAPI.ActivateOAuth2ResourceServerJsonWebKey(context.Background(), authServerId, keyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OAuth2ResourceServerCredentialsKeysAPIService AddOAuth2ResourceServerJsonWebKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authServerId string

		resp, httpRes, err := apiClient.OAuth2ResourceServerCredentialsKeysAPI.AddOAuth2ResourceServerJsonWebKey(context.Background(), authServerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OAuth2ResourceServerCredentialsKeysAPIService DeactivateOAuth2ResourceServerJsonWebKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authServerId string
		var keyId string

		resp, httpRes, err := apiClient.OAuth2ResourceServerCredentialsKeysAPI.DeactivateOAuth2ResourceServerJsonWebKey(context.Background(), authServerId, keyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OAuth2ResourceServerCredentialsKeysAPIService DeleteOAuth2ResourceServerJsonWebKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authServerId string
		var keyId string

		httpRes, err := apiClient.OAuth2ResourceServerCredentialsKeysAPI.DeleteOAuth2ResourceServerJsonWebKey(context.Background(), authServerId, keyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OAuth2ResourceServerCredentialsKeysAPIService GetOAuth2ResourceServerJsonWebKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authServerId string
		var keyId string

		resp, httpRes, err := apiClient.OAuth2ResourceServerCredentialsKeysAPI.GetOAuth2ResourceServerJsonWebKey(context.Background(), authServerId, keyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OAuth2ResourceServerCredentialsKeysAPIService ListOAuth2ResourceServerJsonWebKeys", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authServerId string

		resp, httpRes, err := apiClient.OAuth2ResourceServerCredentialsKeysAPI.ListOAuth2ResourceServerJsonWebKeys(context.Background(), authServerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
