/*
Okta Admin Management

Testing EmailDomainAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package okta

import (
	"context"
	"testing"

	openapiclient "github.com/okta/okta-sdk-golang/v6/okta"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_okta_EmailDomainAPIService(t *testing.T) {

	configuration, err := openapiclient.NewConfiguration()
	require.Nil(t, err)
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test EmailDomainAPIService CreateEmailDomain", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.EmailDomainAPI.CreateEmailDomain(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EmailDomainAPIService DeleteEmailDomain", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var emailDomainId string

		httpRes, err := apiClient.EmailDomainAPI.DeleteEmailDomain(context.Background(), emailDomainId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EmailDomainAPIService GetEmailDomain", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var emailDomainId string

		resp, httpRes, err := apiClient.EmailDomainAPI.GetEmailDomain(context.Background(), emailDomainId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EmailDomainAPIService ListEmailDomains", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.EmailDomainAPI.ListEmailDomains(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EmailDomainAPIService ReplaceEmailDomain", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var emailDomainId string

		resp, httpRes, err := apiClient.EmailDomainAPI.ReplaceEmailDomain(context.Background(), emailDomainId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EmailDomainAPIService VerifyEmailDomain", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var emailDomainId string

		resp, httpRes, err := apiClient.EmailDomainAPI.VerifyEmailDomain(context.Background(), emailDomainId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
