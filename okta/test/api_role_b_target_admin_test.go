/*
Okta Admin Management

Testing RoleBTargetAdminAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package okta

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/okta/okta-sdk-golang/v6/okta"
)

func Test_okta_RoleBTargetAdminAPIService(t *testing.T) {

	configuration, err := openapiclient.NewConfiguration()
	require.Nil(t, err)
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RoleBTargetAdminAPIService AssignAllAppsAsTargetToRoleForUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string
		var roleAssignmentId string

		httpRes, err := apiClient.RoleBTargetAdminAPI.AssignAllAppsAsTargetToRoleForUser(context.Background(), userId, roleAssignmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoleBTargetAdminAPIService AssignAppInstanceTargetToAppAdminRoleForUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string
		var roleAssignmentId string
		var appName string
		var appId string

		httpRes, err := apiClient.RoleBTargetAdminAPI.AssignAppInstanceTargetToAppAdminRoleForUser(context.Background(), userId, roleAssignmentId, appName, appId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoleBTargetAdminAPIService AssignAppTargetToAdminRoleForUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string
		var roleAssignmentId string
		var appName string

		httpRes, err := apiClient.RoleBTargetAdminAPI.AssignAppTargetToAdminRoleForUser(context.Background(), userId, roleAssignmentId, appName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoleBTargetAdminAPIService AssignGroupTargetToUserRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string
		var roleAssignmentId string
		var groupId string

		httpRes, err := apiClient.RoleBTargetAdminAPI.AssignGroupTargetToUserRole(context.Background(), userId, roleAssignmentId, groupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoleBTargetAdminAPIService GetRoleTargetsByUserIdAndRoleId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string
		var roleIdOrEncodedRoleId string

		resp, httpRes, err := apiClient.RoleBTargetAdminAPI.GetRoleTargetsByUserIdAndRoleId(context.Background(), userId, roleIdOrEncodedRoleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoleBTargetAdminAPIService ListApplicationTargetsForApplicationAdministratorRoleForUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string
		var roleAssignmentId string

		resp, httpRes, err := apiClient.RoleBTargetAdminAPI.ListApplicationTargetsForApplicationAdministratorRoleForUser(context.Background(), userId, roleAssignmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoleBTargetAdminAPIService ListGroupTargetsForRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string
		var roleAssignmentId string

		resp, httpRes, err := apiClient.RoleBTargetAdminAPI.ListGroupTargetsForRole(context.Background(), userId, roleAssignmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoleBTargetAdminAPIService UnassignAppInstanceTargetFromAdminRoleForUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string
		var roleAssignmentId string
		var appName string
		var appId string

		httpRes, err := apiClient.RoleBTargetAdminAPI.UnassignAppInstanceTargetFromAdminRoleForUser(context.Background(), userId, roleAssignmentId, appName, appId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoleBTargetAdminAPIService UnassignAppTargetFromAppAdminRoleForUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string
		var roleAssignmentId string
		var appName string

		httpRes, err := apiClient.RoleBTargetAdminAPI.UnassignAppTargetFromAppAdminRoleForUser(context.Background(), userId, roleAssignmentId, appName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoleBTargetAdminAPIService UnassignGroupTargetFromUserAdminRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string
		var roleAssignmentId string
		var groupId string

		httpRes, err := apiClient.RoleBTargetAdminAPI.UnassignGroupTargetFromUserAdminRole(context.Background(), userId, roleAssignmentId, groupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
