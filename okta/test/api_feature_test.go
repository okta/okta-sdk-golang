/*
Okta Admin Management

Testing FeatureAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package okta

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/okta/okta-sdk-golang/v6/okta"
)

func Test_okta_FeatureAPIService(t *testing.T) {

	configuration, err := openapiclient.NewConfiguration()
	require.Nil(t, err)
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test FeatureAPIService GetFeature", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var featureId string

		resp, httpRes, err := apiClient.FeatureAPI.GetFeature(context.Background(), featureId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeatureAPIService ListFeatureDependencies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var featureId string

		resp, httpRes, err := apiClient.FeatureAPI.ListFeatureDependencies(context.Background(), featureId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeatureAPIService ListFeatureDependents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var featureId string

		resp, httpRes, err := apiClient.FeatureAPI.ListFeatureDependents(context.Background(), featureId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeatureAPIService ListFeatures", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FeatureAPI.ListFeatures(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeatureAPIService UpdateFeatureLifecycle", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var featureId string
		var lifecycle string

		resp, httpRes, err := apiClient.FeatureAPI.UpdateFeatureLifecycle(context.Background(), featureId, lifecycle).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
