/*
Okta Admin Management

Testing RealmAssignmentAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package okta

import (
	"context"
	"testing"

	openapiclient "github.com/okta/okta-sdk-golang/v6/okta"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_okta_RealmAssignmentAPIService(t *testing.T) {

	configuration, err := openapiclient.NewConfiguration()
	require.Nil(t, err)
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RealmAssignmentAPIService ActivateRealmAssignment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var assignmentId string

		httpRes, err := apiClient.RealmAssignmentAPI.ActivateRealmAssignment(context.Background(), assignmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RealmAssignmentAPIService CreateRealmAssignment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.RealmAssignmentAPI.CreateRealmAssignment(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RealmAssignmentAPIService DeactivateRealmAssignment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var assignmentId string

		httpRes, err := apiClient.RealmAssignmentAPI.DeactivateRealmAssignment(context.Background(), assignmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RealmAssignmentAPIService DeleteRealmAssignment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var assignmentId string

		httpRes, err := apiClient.RealmAssignmentAPI.DeleteRealmAssignment(context.Background(), assignmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RealmAssignmentAPIService ExecuteRealmAssignment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.RealmAssignmentAPI.ExecuteRealmAssignment(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RealmAssignmentAPIService GetRealmAssignment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var assignmentId string

		resp, httpRes, err := apiClient.RealmAssignmentAPI.GetRealmAssignment(context.Background(), assignmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RealmAssignmentAPIService ListRealmAssignmentOperations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.RealmAssignmentAPI.ListRealmAssignmentOperations(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RealmAssignmentAPIService ListRealmAssignments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.RealmAssignmentAPI.ListRealmAssignments(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RealmAssignmentAPIService ReplaceRealmAssignment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var assignmentId string

		resp, httpRes, err := apiClient.RealmAssignmentAPI.ReplaceRealmAssignment(context.Background(), assignmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
