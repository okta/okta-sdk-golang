/*
Okta Admin Management

Testing ApplicationAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package okta

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/okta/okta-sdk-golang/v6/okta"
)

func Test_okta_ApplicationAPIService(t *testing.T) {

	configuration, err := openapiclient.NewConfiguration()
	require.Nil(t, err)
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ApplicationAPIService ActivateApplication", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string

		httpRes, err := apiClient.ApplicationAPI.ActivateApplication(context.Background(), appId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationAPIService CreateApplication", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ApplicationAPI.CreateApplication(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationAPIService DeactivateApplication", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string

		httpRes, err := apiClient.ApplicationAPI.DeactivateApplication(context.Background(), appId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationAPIService DeleteApplication", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string

		httpRes, err := apiClient.ApplicationAPI.DeleteApplication(context.Background(), appId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationAPIService GetApplication", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string

		resp, httpRes, err := apiClient.ApplicationAPI.GetApplication(context.Background(), appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationAPIService ListApplications", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ApplicationAPI.ListApplications(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationAPIService ReplaceApplication", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string

		resp, httpRes, err := apiClient.ApplicationAPI.ReplaceApplication(context.Background(), appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
