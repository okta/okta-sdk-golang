/*
Okta Admin Management

Testing CAPTCHAAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package okta

import (
	"context"
	"testing"

	openapiclient "github.com/okta/okta-sdk-golang/v6/okta"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_okta_CAPTCHAAPIService(t *testing.T) {

	configuration, err := openapiclient.NewConfiguration()
	require.Nil(t, err)
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CAPTCHAAPIService CreateCaptchaInstance", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CAPTCHAAPI.CreateCaptchaInstance(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CAPTCHAAPIService DeleteCaptchaInstance", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var captchaId string

		httpRes, err := apiClient.CAPTCHAAPI.DeleteCaptchaInstance(context.Background(), captchaId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CAPTCHAAPIService DeleteOrgCaptchaSettings", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.CAPTCHAAPI.DeleteOrgCaptchaSettings(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CAPTCHAAPIService GetCaptchaInstance", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var captchaId string

		resp, httpRes, err := apiClient.CAPTCHAAPI.GetCaptchaInstance(context.Background(), captchaId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CAPTCHAAPIService GetOrgCaptchaSettings", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CAPTCHAAPI.GetOrgCaptchaSettings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CAPTCHAAPIService ListCaptchaInstances", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CAPTCHAAPI.ListCaptchaInstances(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CAPTCHAAPIService ReplaceCaptchaInstance", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var captchaId string

		resp, httpRes, err := apiClient.CAPTCHAAPI.ReplaceCaptchaInstance(context.Background(), captchaId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CAPTCHAAPIService ReplacesOrgCaptchaSettings", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CAPTCHAAPI.ReplacesOrgCaptchaSettings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CAPTCHAAPIService UpdateCaptchaInstance", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var captchaId string

		resp, httpRes, err := apiClient.CAPTCHAAPI.UpdateCaptchaInstance(context.Background(), captchaId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
