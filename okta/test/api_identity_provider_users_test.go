/*
Okta Admin Management

Testing IdentityProviderUsersAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package okta

import (
	"context"
	"testing"

	openapiclient "github.com/okta/okta-sdk-golang/v6/okta"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_okta_IdentityProviderUsersAPIService(t *testing.T) {

	configuration, err := openapiclient.NewConfiguration()
	require.Nil(t, err)
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test IdentityProviderUsersAPIService GetIdentityProviderApplicationUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var idpId string
		var userId string

		resp, httpRes, err := apiClient.IdentityProviderUsersAPI.GetIdentityProviderApplicationUser(context.Background(), idpId, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityProviderUsersAPIService LinkUserToIdentityProvider", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var idpId string
		var userId string

		resp, httpRes, err := apiClient.IdentityProviderUsersAPI.LinkUserToIdentityProvider(context.Background(), idpId, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityProviderUsersAPIService ListIdentityProviderApplicationUsers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var idpId string

		resp, httpRes, err := apiClient.IdentityProviderUsersAPI.ListIdentityProviderApplicationUsers(context.Background(), idpId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityProviderUsersAPIService ListSocialAuthTokens", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var idpId string
		var userId string

		resp, httpRes, err := apiClient.IdentityProviderUsersAPI.ListSocialAuthTokens(context.Background(), idpId, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityProviderUsersAPIService ListUserIdentityProviders", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.IdentityProviderUsersAPI.ListUserIdentityProviders(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityProviderUsersAPIService UnlinkUserFromIdentityProvider", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var idpId string
		var userId string

		httpRes, err := apiClient.IdentityProviderUsersAPI.UnlinkUserFromIdentityProvider(context.Background(), idpId, userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
