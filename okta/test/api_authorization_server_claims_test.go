/*
Okta Admin Management

Testing AuthorizationServerClaimsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package okta

import (
	"context"
	"testing"

	openapiclient "github.com/okta/okta-sdk-golang/v6/okta"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_okta_AuthorizationServerClaimsAPIService(t *testing.T) {

	configuration, err := openapiclient.NewConfiguration()
	require.Nil(t, err)
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AuthorizationServerClaimsAPIService CreateOAuth2Claim", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var authServerId string

		resp, httpRes, err := apiClient.AuthorizationServerClaimsAPI.CreateOAuth2Claim(context.Background(), authServerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorizationServerClaimsAPIService DeleteOAuth2Claim", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var authServerId string
		var claimId string

		httpRes, err := apiClient.AuthorizationServerClaimsAPI.DeleteOAuth2Claim(context.Background(), authServerId, claimId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorizationServerClaimsAPIService GetOAuth2Claim", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var authServerId string
		var claimId string

		resp, httpRes, err := apiClient.AuthorizationServerClaimsAPI.GetOAuth2Claim(context.Background(), authServerId, claimId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorizationServerClaimsAPIService ListOAuth2Claims", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var authServerId string

		resp, httpRes, err := apiClient.AuthorizationServerClaimsAPI.ListOAuth2Claims(context.Background(), authServerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorizationServerClaimsAPIService ReplaceOAuth2Claim", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var authServerId string
		var claimId string

		resp, httpRes, err := apiClient.AuthorizationServerClaimsAPI.ReplaceOAuth2Claim(context.Background(), authServerId, claimId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
