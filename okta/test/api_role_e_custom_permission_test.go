/*
Okta Admin Management

Testing RoleECustomPermissionAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package okta

import (
	"context"
	"testing"

	openapiclient "github.com/okta/okta-sdk-golang/v6/okta"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_okta_RoleECustomPermissionAPIService(t *testing.T) {

	configuration, err := openapiclient.NewConfiguration()
	require.Nil(t, err)
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RoleECustomPermissionAPIService CreateRolePermission", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var roleIdOrLabel string
		var permissionType string

		httpRes, err := apiClient.RoleECustomPermissionAPI.CreateRolePermission(context.Background(), roleIdOrLabel, permissionType).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoleECustomPermissionAPIService DeleteRolePermission", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var roleIdOrLabel string
		var permissionType string

		httpRes, err := apiClient.RoleECustomPermissionAPI.DeleteRolePermission(context.Background(), roleIdOrLabel, permissionType).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoleECustomPermissionAPIService GetRolePermission", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var roleIdOrLabel string
		var permissionType string

		resp, httpRes, err := apiClient.RoleECustomPermissionAPI.GetRolePermission(context.Background(), roleIdOrLabel, permissionType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoleECustomPermissionAPIService ListRolePermissions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var roleIdOrLabel string

		resp, httpRes, err := apiClient.RoleECustomPermissionAPI.ListRolePermissions(context.Background(), roleIdOrLabel).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoleECustomPermissionAPIService ReplaceRolePermission", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var roleIdOrLabel string
		var permissionType string

		resp, httpRes, err := apiClient.RoleECustomPermissionAPI.ReplaceRolePermission(context.Background(), roleIdOrLabel, permissionType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
