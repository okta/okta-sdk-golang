/*
Okta Admin Management

Testing GovernanceBundleAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package okta

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/okta/okta-sdk-golang/v6/okta"
)

func Test_okta_GovernanceBundleAPIService(t *testing.T) {

	configuration, err := openapiclient.NewConfiguration()
	require.Nil(t, err)
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test GovernanceBundleAPIService CreateGovernanceBundle", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.GovernanceBundleAPI.CreateGovernanceBundle(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GovernanceBundleAPIService DeleteGovernanceBundle", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bundleId string

		httpRes, err := apiClient.GovernanceBundleAPI.DeleteGovernanceBundle(context.Background(), bundleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GovernanceBundleAPIService GetGovernanceBundle", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bundleId string

		resp, httpRes, err := apiClient.GovernanceBundleAPI.GetGovernanceBundle(context.Background(), bundleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GovernanceBundleAPIService GetOptInStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.GovernanceBundleAPI.GetOptInStatus(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GovernanceBundleAPIService ListBundleEntitlementValues", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bundleId string
		var entitlementId string

		resp, httpRes, err := apiClient.GovernanceBundleAPI.ListBundleEntitlementValues(context.Background(), bundleId, entitlementId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GovernanceBundleAPIService ListBundleEntitlements", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bundleId string

		resp, httpRes, err := apiClient.GovernanceBundleAPI.ListBundleEntitlements(context.Background(), bundleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GovernanceBundleAPIService ListGovernanceBundles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.GovernanceBundleAPI.ListGovernanceBundles(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GovernanceBundleAPIService OptIn", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.GovernanceBundleAPI.OptIn(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GovernanceBundleAPIService OptOut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.GovernanceBundleAPI.OptOut(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GovernanceBundleAPIService ReplaceGovernanceBundle", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bundleId string

		resp, httpRes, err := apiClient.GovernanceBundleAPI.ReplaceGovernanceBundle(context.Background(), bundleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
