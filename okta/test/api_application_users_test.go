/*
Okta Admin Management

Testing ApplicationUsersAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package okta

import (
	"context"
	"testing"

	openapiclient "github.com/okta/okta-sdk-golang/v6/okta"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_okta_ApplicationUsersAPIService(t *testing.T) {

	configuration, err := openapiclient.NewConfiguration()
	require.Nil(t, err)
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ApplicationUsersAPIService AssignUserToApplication", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var appId string

		resp, httpRes, err := apiClient.ApplicationUsersAPI.AssignUserToApplication(context.Background(), appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationUsersAPIService GetApplicationUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var appId string
		var userId string

		resp, httpRes, err := apiClient.ApplicationUsersAPI.GetApplicationUser(context.Background(), appId, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationUsersAPIService ListApplicationUsers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var appId string

		resp, httpRes, err := apiClient.ApplicationUsersAPI.ListApplicationUsers(context.Background(), appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationUsersAPIService UnassignUserFromApplication", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var appId string
		var userId string

		httpRes, err := apiClient.ApplicationUsersAPI.UnassignUserFromApplication(context.Background(), appId, userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationUsersAPIService UpdateApplicationUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var appId string
		var userId string

		resp, httpRes, err := apiClient.ApplicationUsersAPI.UpdateApplicationUser(context.Background(), appId, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
