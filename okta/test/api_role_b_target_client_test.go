/*
Okta Admin Management

Testing RoleBTargetClientAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package okta

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/okta/okta-sdk-golang/v6/okta"
)

func Test_okta_RoleBTargetClientAPIService(t *testing.T) {

	configuration, err := openapiclient.NewConfiguration()
	require.Nil(t, err)
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RoleBTargetClientAPIService AssignAppTargetInstanceRoleForClient", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clientId string
		var roleAssignmentId string
		var appName string
		var appId string

		httpRes, err := apiClient.RoleBTargetClientAPI.AssignAppTargetInstanceRoleForClient(context.Background(), clientId, roleAssignmentId, appName, appId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoleBTargetClientAPIService AssignAppTargetRoleToClient", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clientId string
		var roleAssignmentId string
		var appName string

		httpRes, err := apiClient.RoleBTargetClientAPI.AssignAppTargetRoleToClient(context.Background(), clientId, roleAssignmentId, appName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoleBTargetClientAPIService AssignGroupTargetRoleForClient", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clientId string
		var roleAssignmentId string
		var groupId string

		httpRes, err := apiClient.RoleBTargetClientAPI.AssignGroupTargetRoleForClient(context.Background(), clientId, roleAssignmentId, groupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoleBTargetClientAPIService ListAppTargetRoleToClient", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clientId string
		var roleAssignmentId string

		resp, httpRes, err := apiClient.RoleBTargetClientAPI.ListAppTargetRoleToClient(context.Background(), clientId, roleAssignmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoleBTargetClientAPIService ListGroupTargetRoleForClient", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clientId string
		var roleAssignmentId string

		resp, httpRes, err := apiClient.RoleBTargetClientAPI.ListGroupTargetRoleForClient(context.Background(), clientId, roleAssignmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoleBTargetClientAPIService RemoveAppTargetInstanceRoleForClient", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clientId string
		var roleAssignmentId string
		var appName string
		var appId string

		httpRes, err := apiClient.RoleBTargetClientAPI.RemoveAppTargetInstanceRoleForClient(context.Background(), clientId, roleAssignmentId, appName, appId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoleBTargetClientAPIService RemoveAppTargetRoleFromClient", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clientId string
		var roleAssignmentId string
		var appName string

		httpRes, err := apiClient.RoleBTargetClientAPI.RemoveAppTargetRoleFromClient(context.Background(), clientId, roleAssignmentId, appName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoleBTargetClientAPIService RemoveGroupTargetRoleFromClient", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clientId string
		var roleAssignmentId string
		var groupId string

		httpRes, err := apiClient.RoleBTargetClientAPI.RemoveGroupTargetRoleFromClient(context.Background(), clientId, roleAssignmentId, groupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
