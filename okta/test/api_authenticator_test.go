/*
Okta Admin Management

Testing AuthenticatorAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package okta

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/okta/okta-sdk-golang/v6/okta"
)

func Test_okta_AuthenticatorAPIService(t *testing.T) {

	configuration, err := openapiclient.NewConfiguration()
	require.Nil(t, err)
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AuthenticatorAPIService ActivateAuthenticator", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authenticatorId string

		resp, httpRes, err := apiClient.AuthenticatorAPI.ActivateAuthenticator(context.Background(), authenticatorId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticatorAPIService ActivateAuthenticatorMethod", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authenticatorId string
		var methodType string

		resp, httpRes, err := apiClient.AuthenticatorAPI.ActivateAuthenticatorMethod(context.Background(), authenticatorId, methodType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticatorAPIService CreateAuthenticator", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AuthenticatorAPI.CreateAuthenticator(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticatorAPIService CreateCustomAAGUID", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authenticatorId string

		resp, httpRes, err := apiClient.AuthenticatorAPI.CreateCustomAAGUID(context.Background(), authenticatorId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticatorAPIService DeactivateAuthenticator", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authenticatorId string

		resp, httpRes, err := apiClient.AuthenticatorAPI.DeactivateAuthenticator(context.Background(), authenticatorId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticatorAPIService DeactivateAuthenticatorMethod", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authenticatorId string
		var methodType string

		resp, httpRes, err := apiClient.AuthenticatorAPI.DeactivateAuthenticatorMethod(context.Background(), authenticatorId, methodType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticatorAPIService DeleteCustomAAGUID", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authenticatorId string
		var aaguid string

		httpRes, err := apiClient.AuthenticatorAPI.DeleteCustomAAGUID(context.Background(), authenticatorId, aaguid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticatorAPIService GetAuthenticator", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authenticatorId string

		resp, httpRes, err := apiClient.AuthenticatorAPI.GetAuthenticator(context.Background(), authenticatorId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticatorAPIService GetAuthenticatorMethod", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authenticatorId string
		var methodType string

		resp, httpRes, err := apiClient.AuthenticatorAPI.GetAuthenticatorMethod(context.Background(), authenticatorId, methodType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticatorAPIService GetCustomAAGUID", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authenticatorId string
		var aaguid string

		resp, httpRes, err := apiClient.AuthenticatorAPI.GetCustomAAGUID(context.Background(), authenticatorId, aaguid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticatorAPIService GetWellKnownAppAuthenticatorConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AuthenticatorAPI.GetWellKnownAppAuthenticatorConfiguration(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticatorAPIService ListAllCustomAAGUIDs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authenticatorId string

		resp, httpRes, err := apiClient.AuthenticatorAPI.ListAllCustomAAGUIDs(context.Background(), authenticatorId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticatorAPIService ListAuthenticatorMethods", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authenticatorId string

		resp, httpRes, err := apiClient.AuthenticatorAPI.ListAuthenticatorMethods(context.Background(), authenticatorId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticatorAPIService ListAuthenticators", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AuthenticatorAPI.ListAuthenticators(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticatorAPIService ReplaceAuthenticator", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authenticatorId string

		resp, httpRes, err := apiClient.AuthenticatorAPI.ReplaceAuthenticator(context.Background(), authenticatorId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticatorAPIService ReplaceAuthenticatorMethod", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authenticatorId string
		var methodType string

		resp, httpRes, err := apiClient.AuthenticatorAPI.ReplaceAuthenticatorMethod(context.Background(), authenticatorId, methodType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticatorAPIService ReplaceCustomAAGUID", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authenticatorId string
		var aaguid string

		resp, httpRes, err := apiClient.AuthenticatorAPI.ReplaceCustomAAGUID(context.Background(), authenticatorId, aaguid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticatorAPIService UpdateCustomAAGUID", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var authenticatorId string
		var aaguid string

		resp, httpRes, err := apiClient.AuthenticatorAPI.UpdateCustomAAGUID(context.Background(), authenticatorId, aaguid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
