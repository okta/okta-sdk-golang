/*
Okta Admin Management

Testing RoleAssignmentAUserAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package okta

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/okta/okta-sdk-golang/v6/okta"
)

func Test_okta_RoleAssignmentAUserAPIService(t *testing.T) {

	configuration, err := openapiclient.NewConfiguration()
	require.Nil(t, err)
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RoleAssignmentAUserAPIService AssignRoleToUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string

		resp, httpRes, err := apiClient.RoleAssignmentAUserAPI.AssignRoleToUser(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoleAssignmentAUserAPIService GetRoleAssignmentGovernanceGrant", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string
		var roleAssignmentId string
		var grantId string

		resp, httpRes, err := apiClient.RoleAssignmentAUserAPI.GetRoleAssignmentGovernanceGrant(context.Background(), userId, roleAssignmentId, grantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoleAssignmentAUserAPIService GetRoleAssignmentGovernanceGrantResources", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string
		var roleAssignmentId string
		var grantId string

		resp, httpRes, err := apiClient.RoleAssignmentAUserAPI.GetRoleAssignmentGovernanceGrantResources(context.Background(), userId, roleAssignmentId, grantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoleAssignmentAUserAPIService GetUserAssignedRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string
		var roleAssignmentId string

		resp, httpRes, err := apiClient.RoleAssignmentAUserAPI.GetUserAssignedRole(context.Background(), userId, roleAssignmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoleAssignmentAUserAPIService GetUserAssignedRoleGovernance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string
		var roleAssignmentId string

		resp, httpRes, err := apiClient.RoleAssignmentAUserAPI.GetUserAssignedRoleGovernance(context.Background(), userId, roleAssignmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoleAssignmentAUserAPIService ListAssignedRolesForUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string

		resp, httpRes, err := apiClient.RoleAssignmentAUserAPI.ListAssignedRolesForUser(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoleAssignmentAUserAPIService ListUsersWithRoleAssignments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RoleAssignmentAUserAPI.ListUsersWithRoleAssignments(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoleAssignmentAUserAPIService UnassignRoleFromUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string
		var roleAssignmentId string

		httpRes, err := apiClient.RoleAssignmentAUserAPI.UnassignRoleFromUser(context.Background(), userId, roleAssignmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
