/*
Okta Admin Management

Testing TrustedOriginAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package okta

import (
	"context"
	"testing"

	openapiclient "github.com/okta/okta-sdk-golang/v6/okta"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_okta_TrustedOriginAPIService(t *testing.T) {

	configuration, err := openapiclient.NewConfiguration()
	require.Nil(t, err)
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TrustedOriginAPIService ActivateTrustedOrigin", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var trustedOriginId string

		resp, httpRes, err := apiClient.TrustedOriginAPI.ActivateTrustedOrigin(context.Background(), trustedOriginId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TrustedOriginAPIService CreateTrustedOrigin", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TrustedOriginAPI.CreateTrustedOrigin(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TrustedOriginAPIService DeactivateTrustedOrigin", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var trustedOriginId string

		resp, httpRes, err := apiClient.TrustedOriginAPI.DeactivateTrustedOrigin(context.Background(), trustedOriginId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TrustedOriginAPIService DeleteTrustedOrigin", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var trustedOriginId string

		httpRes, err := apiClient.TrustedOriginAPI.DeleteTrustedOrigin(context.Background(), trustedOriginId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TrustedOriginAPIService GetTrustedOrigin", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var trustedOriginId string

		resp, httpRes, err := apiClient.TrustedOriginAPI.GetTrustedOrigin(context.Background(), trustedOriginId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TrustedOriginAPIService ListTrustedOrigins", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TrustedOriginAPI.ListTrustedOrigins(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TrustedOriginAPIService ReplaceTrustedOrigin", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var trustedOriginId string

		resp, httpRes, err := apiClient.TrustedOriginAPI.ReplaceTrustedOrigin(context.Background(), trustedOriginId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
