/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 5.1.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"reflect"
	"strings"
)

// ProvisioningConnectionOauth struct for ProvisioningConnectionOauth
type ProvisioningConnectionOauth struct {
	ProvisioningConnection
	Profile              *ProvisioningConnectionProfileOauth `json:"profile,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ProvisioningConnectionOauth ProvisioningConnectionOauth

// NewProvisioningConnectionOauth instantiates a new ProvisioningConnectionOauth object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProvisioningConnectionOauth(authScheme string, status string) *ProvisioningConnectionOauth {
	this := ProvisioningConnectionOauth{}
	this.AuthScheme = authScheme
	this.Status = status
	return &this
}

// NewProvisioningConnectionOauthWithDefaults instantiates a new ProvisioningConnectionOauth object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProvisioningConnectionOauthWithDefaults() *ProvisioningConnectionOauth {
	this := ProvisioningConnectionOauth{}
	return &this
}

// GetProfile returns the Profile field value if set, zero value otherwise.
func (o *ProvisioningConnectionOauth) GetProfile() ProvisioningConnectionProfileOauth {
	if o == nil || o.Profile == nil {
		var ret ProvisioningConnectionProfileOauth
		return ret
	}
	return *o.Profile
}

// GetProfileOk returns a tuple with the Profile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisioningConnectionOauth) GetProfileOk() (*ProvisioningConnectionProfileOauth, bool) {
	if o == nil || o.Profile == nil {
		return nil, false
	}
	return o.Profile, true
}

// HasProfile returns a boolean if a field has been set.
func (o *ProvisioningConnectionOauth) HasProfile() bool {
	if o != nil && o.Profile != nil {
		return true
	}

	return false
}

// SetProfile gets a reference to the given ProvisioningConnectionProfileOauth and assigns it to the Profile field.
func (o *ProvisioningConnectionOauth) SetProfile(v ProvisioningConnectionProfileOauth) {
	o.Profile = &v
}

func (o ProvisioningConnectionOauth) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedProvisioningConnection, errProvisioningConnection := json.Marshal(o.ProvisioningConnection)
	if errProvisioningConnection != nil {
		return []byte{}, errProvisioningConnection
	}
	errProvisioningConnection = json.Unmarshal([]byte(serializedProvisioningConnection), &toSerialize)
	if errProvisioningConnection != nil {
		return []byte{}, errProvisioningConnection
	}
	if o.Profile != nil {
		toSerialize["profile"] = o.Profile
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ProvisioningConnectionOauth) UnmarshalJSON(bytes []byte) (err error) {
	type ProvisioningConnectionOauthWithoutEmbeddedStruct struct {
		Profile *ProvisioningConnectionProfileOauth `json:"profile,omitempty"`
	}

	varProvisioningConnectionOauthWithoutEmbeddedStruct := ProvisioningConnectionOauthWithoutEmbeddedStruct{}

	err = json.Unmarshal(bytes, &varProvisioningConnectionOauthWithoutEmbeddedStruct)
	if err == nil {
		varProvisioningConnectionOauth := _ProvisioningConnectionOauth{}
		varProvisioningConnectionOauth.Profile = varProvisioningConnectionOauthWithoutEmbeddedStruct.Profile
		*o = ProvisioningConnectionOauth(varProvisioningConnectionOauth)
	} else {
		return err
	}

	varProvisioningConnectionOauth := _ProvisioningConnectionOauth{}

	err = json.Unmarshal(bytes, &varProvisioningConnectionOauth)
	if err == nil {
		o.ProvisioningConnection = varProvisioningConnectionOauth.ProvisioningConnection
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &additionalProperties)
	if err == nil {
		delete(additionalProperties, "profile")

		// remove fields from embedded structs
		reflectProvisioningConnection := reflect.ValueOf(o.ProvisioningConnection)
		for i := 0; i < reflectProvisioningConnection.Type().NumField(); i++ {
			t := reflectProvisioningConnection.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	} else {
		return err
	}

	return err
}

type NullableProvisioningConnectionOauth struct {
	value *ProvisioningConnectionOauth
	isSet bool
}

func (v NullableProvisioningConnectionOauth) Get() *ProvisioningConnectionOauth {
	return v.value
}

func (v *NullableProvisioningConnectionOauth) Set(val *ProvisioningConnectionOauth) {
	v.value = val
	v.isSet = true
}

func (v NullableProvisioningConnectionOauth) IsSet() bool {
	return v.isSet
}

func (v *NullableProvisioningConnectionOauth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProvisioningConnectionOauth(val *ProvisioningConnectionOauth) *NullableProvisioningConnectionOauth {
	return &NullableProvisioningConnectionOauth{value: val, isSet: true}
}

func (v NullableProvisioningConnectionOauth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProvisioningConnectionOauth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
