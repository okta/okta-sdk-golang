/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 5.1.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"time"
)

// NetworkZone struct for NetworkZone
type NetworkZone struct {
	// Dynamic network zone property: An array of strings that represent an ASN numeric value
	Asns []string `json:"asns,omitempty"`
	// Timestamp when the network zone was created
	Created *time.Time `json:"created,omitempty"`
	// IP network zone property: the IP addresses (range or CIDR form) of this zone. The maximum array length is 150 entries for admin-created IP zones, 1000 entries for IP blocklist zones, and 5000 entries for the default system IP Zone.
	Gateways []NetworkZoneAddress `json:"gateways,omitempty"`
	// Unique identifier for the network zone
	Id *string `json:"id,omitempty"`
	// Timestamp when the network zone was last modified
	LastUpdated *time.Time `json:"lastUpdated,omitempty"`
	// Dynamic network zone property: an array of geolocations of this network zone
	Locations []NetworkZoneLocation `json:"locations,omitempty"`
	// Unique name for this network zone. Maximum of 128 characters.
	Name *string `json:"name,omitempty"`
	// IP network zone property: the IP addresses (range or CIDR form) that are allowed to forward a request from gateway addresses These proxies are automatically trusted by Threat Insights, and used to identify the client IP of a request. The maximum array length is 150 entries for admin-created zones and 5000 entries for the default system IP Zone.
	Proxies []NetworkZoneAddress `json:"proxies,omitempty"`
	// Dynamic network zone property: the proxy type used
	ProxyType *string `json:"proxyType,omitempty"`
	// Network zone status
	Status *string `json:"status,omitempty"`
	// Indicates if this is a system network zone. For admin-created zones, this is always `false`. The system IP Policy Network Zone (`LegacyIpZone`) is included by default in your Okta org. Notice that `system=true` for the `LegacyIpZone` object. Admin users can modify the name of this default system Zone and can add up to 5000 gateway or proxy IP entries.
	System *bool `json:"system,omitempty"`
	// The type of network zone
	Type *string `json:"type,omitempty"`
	// The usage of the network zone
	Usage                *string           `json:"usage,omitempty"`
	Links                *NetworkZoneLinks `json:"_links,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NetworkZone NetworkZone

// NewNetworkZone instantiates a new NetworkZone object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkZone() *NetworkZone {
	this := NetworkZone{}
	return &this
}

// NewNetworkZoneWithDefaults instantiates a new NetworkZone object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkZoneWithDefaults() *NetworkZone {
	this := NetworkZone{}
	return &this
}

// GetAsns returns the Asns field value if set, zero value otherwise.
func (o *NetworkZone) GetAsns() []string {
	if o == nil || o.Asns == nil {
		var ret []string
		return ret
	}
	return o.Asns
}

// GetAsnsOk returns a tuple with the Asns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkZone) GetAsnsOk() ([]string, bool) {
	if o == nil || o.Asns == nil {
		return nil, false
	}
	return o.Asns, true
}

// HasAsns returns a boolean if a field has been set.
func (o *NetworkZone) HasAsns() bool {
	if o != nil && o.Asns != nil {
		return true
	}

	return false
}

// SetAsns gets a reference to the given []string and assigns it to the Asns field.
func (o *NetworkZone) SetAsns(v []string) {
	o.Asns = v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *NetworkZone) GetCreated() time.Time {
	if o == nil || o.Created == nil {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkZone) GetCreatedOk() (*time.Time, bool) {
	if o == nil || o.Created == nil {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *NetworkZone) HasCreated() bool {
	if o != nil && o.Created != nil {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *NetworkZone) SetCreated(v time.Time) {
	o.Created = &v
}

// GetGateways returns the Gateways field value if set, zero value otherwise.
func (o *NetworkZone) GetGateways() []NetworkZoneAddress {
	if o == nil || o.Gateways == nil {
		var ret []NetworkZoneAddress
		return ret
	}
	return o.Gateways
}

// GetGatewaysOk returns a tuple with the Gateways field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkZone) GetGatewaysOk() ([]NetworkZoneAddress, bool) {
	if o == nil || o.Gateways == nil {
		return nil, false
	}
	return o.Gateways, true
}

// HasGateways returns a boolean if a field has been set.
func (o *NetworkZone) HasGateways() bool {
	if o != nil && o.Gateways != nil {
		return true
	}

	return false
}

// SetGateways gets a reference to the given []NetworkZoneAddress and assigns it to the Gateways field.
func (o *NetworkZone) SetGateways(v []NetworkZoneAddress) {
	o.Gateways = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NetworkZone) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkZone) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NetworkZone) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *NetworkZone) SetId(v string) {
	o.Id = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *NetworkZone) GetLastUpdated() time.Time {
	if o == nil || o.LastUpdated == nil {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkZone) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || o.LastUpdated == nil {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *NetworkZone) HasLastUpdated() bool {
	if o != nil && o.LastUpdated != nil {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *NetworkZone) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetLocations returns the Locations field value if set, zero value otherwise.
func (o *NetworkZone) GetLocations() []NetworkZoneLocation {
	if o == nil || o.Locations == nil {
		var ret []NetworkZoneLocation
		return ret
	}
	return o.Locations
}

// GetLocationsOk returns a tuple with the Locations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkZone) GetLocationsOk() ([]NetworkZoneLocation, bool) {
	if o == nil || o.Locations == nil {
		return nil, false
	}
	return o.Locations, true
}

// HasLocations returns a boolean if a field has been set.
func (o *NetworkZone) HasLocations() bool {
	if o != nil && o.Locations != nil {
		return true
	}

	return false
}

// SetLocations gets a reference to the given []NetworkZoneLocation and assigns it to the Locations field.
func (o *NetworkZone) SetLocations(v []NetworkZoneLocation) {
	o.Locations = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NetworkZone) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkZone) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NetworkZone) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NetworkZone) SetName(v string) {
	o.Name = &v
}

// GetProxies returns the Proxies field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkZone) GetProxies() []NetworkZoneAddress {
	if o == nil {
		var ret []NetworkZoneAddress
		return ret
	}
	return o.Proxies
}

// GetProxiesOk returns a tuple with the Proxies field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkZone) GetProxiesOk() ([]NetworkZoneAddress, bool) {
	if o == nil || o.Proxies == nil {
		return nil, false
	}
	return o.Proxies, true
}

// HasProxies returns a boolean if a field has been set.
func (o *NetworkZone) HasProxies() bool {
	if o != nil && o.Proxies != nil {
		return true
	}

	return false
}

// SetProxies gets a reference to the given []NetworkZoneAddress and assigns it to the Proxies field.
func (o *NetworkZone) SetProxies(v []NetworkZoneAddress) {
	o.Proxies = v
}

// GetProxyType returns the ProxyType field value if set, zero value otherwise.
func (o *NetworkZone) GetProxyType() string {
	if o == nil || o.ProxyType == nil {
		var ret string
		return ret
	}
	return *o.ProxyType
}

// GetProxyTypeOk returns a tuple with the ProxyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkZone) GetProxyTypeOk() (*string, bool) {
	if o == nil || o.ProxyType == nil {
		return nil, false
	}
	return o.ProxyType, true
}

// HasProxyType returns a boolean if a field has been set.
func (o *NetworkZone) HasProxyType() bool {
	if o != nil && o.ProxyType != nil {
		return true
	}

	return false
}

// SetProxyType gets a reference to the given string and assigns it to the ProxyType field.
func (o *NetworkZone) SetProxyType(v string) {
	o.ProxyType = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *NetworkZone) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkZone) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *NetworkZone) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *NetworkZone) SetStatus(v string) {
	o.Status = &v
}

// GetSystem returns the System field value if set, zero value otherwise.
func (o *NetworkZone) GetSystem() bool {
	if o == nil || o.System == nil {
		var ret bool
		return ret
	}
	return *o.System
}

// GetSystemOk returns a tuple with the System field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkZone) GetSystemOk() (*bool, bool) {
	if o == nil || o.System == nil {
		return nil, false
	}
	return o.System, true
}

// HasSystem returns a boolean if a field has been set.
func (o *NetworkZone) HasSystem() bool {
	if o != nil && o.System != nil {
		return true
	}

	return false
}

// SetSystem gets a reference to the given bool and assigns it to the System field.
func (o *NetworkZone) SetSystem(v bool) {
	o.System = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *NetworkZone) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkZone) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *NetworkZone) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *NetworkZone) SetType(v string) {
	o.Type = &v
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *NetworkZone) GetUsage() string {
	if o == nil || o.Usage == nil {
		var ret string
		return ret
	}
	return *o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkZone) GetUsageOk() (*string, bool) {
	if o == nil || o.Usage == nil {
		return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *NetworkZone) HasUsage() bool {
	if o != nil && o.Usage != nil {
		return true
	}

	return false
}

// SetUsage gets a reference to the given string and assigns it to the Usage field.
func (o *NetworkZone) SetUsage(v string) {
	o.Usage = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *NetworkZone) GetLinks() NetworkZoneLinks {
	if o == nil || o.Links == nil {
		var ret NetworkZoneLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkZone) GetLinksOk() (*NetworkZoneLinks, bool) {
	if o == nil || o.Links == nil {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *NetworkZone) HasLinks() bool {
	if o != nil && o.Links != nil {
		return true
	}

	return false
}

// SetLinks gets a reference to the given NetworkZoneLinks and assigns it to the Links field.
func (o *NetworkZone) SetLinks(v NetworkZoneLinks) {
	o.Links = &v
}

func (o NetworkZone) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Asns != nil {
		toSerialize["asns"] = o.Asns
	}
	if o.Created != nil {
		toSerialize["created"] = o.Created
	}
	if o.Gateways != nil {
		toSerialize["gateways"] = o.Gateways
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.LastUpdated != nil {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if o.Locations != nil {
		toSerialize["locations"] = o.Locations
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Proxies != nil {
		toSerialize["proxies"] = o.Proxies
	}
	if o.ProxyType != nil {
		toSerialize["proxyType"] = o.ProxyType
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.System != nil {
		toSerialize["system"] = o.System
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Usage != nil {
		toSerialize["usage"] = o.Usage
	}
	if o.Links != nil {
		toSerialize["_links"] = o.Links
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *NetworkZone) UnmarshalJSON(bytes []byte) (err error) {
	varNetworkZone := _NetworkZone{}

	err = json.Unmarshal(bytes, &varNetworkZone)
	if err == nil {
		*o = NetworkZone(varNetworkZone)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &additionalProperties)
	if err == nil {
		delete(additionalProperties, "asns")
		delete(additionalProperties, "created")
		delete(additionalProperties, "gateways")
		delete(additionalProperties, "id")
		delete(additionalProperties, "lastUpdated")
		delete(additionalProperties, "locations")
		delete(additionalProperties, "name")
		delete(additionalProperties, "proxies")
		delete(additionalProperties, "proxyType")
		delete(additionalProperties, "status")
		delete(additionalProperties, "system")
		delete(additionalProperties, "type")
		delete(additionalProperties, "usage")
		delete(additionalProperties, "_links")
		o.AdditionalProperties = additionalProperties
	} else {
		return err
	}

	return err
}

type NullableNetworkZone struct {
	value *NetworkZone
	isSet bool
}

func (v NullableNetworkZone) Get() *NetworkZone {
	return v.value
}

func (v *NullableNetworkZone) Set(val *NetworkZone) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkZone) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkZone) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkZone(val *NetworkZone) *NullableNetworkZone {
	return &NullableNetworkZone{value: val, isSet: true}
}

func (v NullableNetworkZone) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkZone) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
