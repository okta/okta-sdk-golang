/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 5.1.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
)

// OINApplicationSettingsSignOn Base sign-in setting schema for an OIN app
type OINApplicationSettingsSignOn struct {
	// Authentication mode for the app
	SignOnMode           *string `json:"signOnMode,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OINApplicationSettingsSignOn OINApplicationSettingsSignOn

// NewOINApplicationSettingsSignOn instantiates a new OINApplicationSettingsSignOn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOINApplicationSettingsSignOn() *OINApplicationSettingsSignOn {
	this := OINApplicationSettingsSignOn{}
	return &this
}

// NewOINApplicationSettingsSignOnWithDefaults instantiates a new OINApplicationSettingsSignOn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOINApplicationSettingsSignOnWithDefaults() *OINApplicationSettingsSignOn {
	this := OINApplicationSettingsSignOn{}
	return &this
}

// GetSignOnMode returns the SignOnMode field value if set, zero value otherwise.
func (o *OINApplicationSettingsSignOn) GetSignOnMode() string {
	if o == nil || o.SignOnMode == nil {
		var ret string
		return ret
	}
	return *o.SignOnMode
}

// GetSignOnModeOk returns a tuple with the SignOnMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OINApplicationSettingsSignOn) GetSignOnModeOk() (*string, bool) {
	if o == nil || o.SignOnMode == nil {
		return nil, false
	}
	return o.SignOnMode, true
}

// HasSignOnMode returns a boolean if a field has been set.
func (o *OINApplicationSettingsSignOn) HasSignOnMode() bool {
	if o != nil && o.SignOnMode != nil {
		return true
	}

	return false
}

// SetSignOnMode gets a reference to the given string and assigns it to the SignOnMode field.
func (o *OINApplicationSettingsSignOn) SetSignOnMode(v string) {
	o.SignOnMode = &v
}

func (o OINApplicationSettingsSignOn) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SignOnMode != nil {
		toSerialize["signOnMode"] = o.SignOnMode
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *OINApplicationSettingsSignOn) UnmarshalJSON(bytes []byte) (err error) {
	varOINApplicationSettingsSignOn := _OINApplicationSettingsSignOn{}

	err = json.Unmarshal(bytes, &varOINApplicationSettingsSignOn)
	if err == nil {
		*o = OINApplicationSettingsSignOn(varOINApplicationSettingsSignOn)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &additionalProperties)
	if err == nil {
		delete(additionalProperties, "signOnMode")
		o.AdditionalProperties = additionalProperties
	} else {
		return err
	}

	return err
}

type NullableOINApplicationSettingsSignOn struct {
	value *OINApplicationSettingsSignOn
	isSet bool
}

func (v NullableOINApplicationSettingsSignOn) Get() *OINApplicationSettingsSignOn {
	return v.value
}

func (v *NullableOINApplicationSettingsSignOn) Set(val *OINApplicationSettingsSignOn) {
	v.value = val
	v.isSet = true
}

func (v NullableOINApplicationSettingsSignOn) IsSet() bool {
	return v.isSet
}

func (v *NullableOINApplicationSettingsSignOn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOINApplicationSettingsSignOn(val *OINApplicationSettingsSignOn) *NullableOINApplicationSettingsSignOn {
	return &NullableOINApplicationSettingsSignOn{value: val, isSet: true}
}

func (v NullableOINApplicationSettingsSignOn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOINApplicationSettingsSignOn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
