/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 5.1.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
)

// PasswordCredential When a user has a valid password, imported hashed password, or password hook, and a response object contains a password credential, then the password object is a bare object without the value property defined (for example, `password: {}`). This  indicates that a password value exists. You can modify password policy requirements in the Admin Console by editing the Password authenticator:  **Security** > **Authenticators** > **Password** (or for Okta Classic orgs, use **Security** > **Authentication** > **Password**).
type PasswordCredential struct {
	Hash *PasswordCredentialHash `json:"hash,omitempty"`
	Hook *PasswordCredentialHook `json:"hook,omitempty"`
	// Specifies the password for a user. The Password Policy validates this password.
	Value                *string `json:"value,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PasswordCredential PasswordCredential

// NewPasswordCredential instantiates a new PasswordCredential object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPasswordCredential() *PasswordCredential {
	this := PasswordCredential{}
	return &this
}

// NewPasswordCredentialWithDefaults instantiates a new PasswordCredential object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPasswordCredentialWithDefaults() *PasswordCredential {
	this := PasswordCredential{}
	return &this
}

// GetHash returns the Hash field value if set, zero value otherwise.
func (o *PasswordCredential) GetHash() PasswordCredentialHash {
	if o == nil || o.Hash == nil {
		var ret PasswordCredentialHash
		return ret
	}
	return *o.Hash
}

// GetHashOk returns a tuple with the Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordCredential) GetHashOk() (*PasswordCredentialHash, bool) {
	if o == nil || o.Hash == nil {
		return nil, false
	}
	return o.Hash, true
}

// HasHash returns a boolean if a field has been set.
func (o *PasswordCredential) HasHash() bool {
	if o != nil && o.Hash != nil {
		return true
	}

	return false
}

// SetHash gets a reference to the given PasswordCredentialHash and assigns it to the Hash field.
func (o *PasswordCredential) SetHash(v PasswordCredentialHash) {
	o.Hash = &v
}

// GetHook returns the Hook field value if set, zero value otherwise.
func (o *PasswordCredential) GetHook() PasswordCredentialHook {
	if o == nil || o.Hook == nil {
		var ret PasswordCredentialHook
		return ret
	}
	return *o.Hook
}

// GetHookOk returns a tuple with the Hook field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordCredential) GetHookOk() (*PasswordCredentialHook, bool) {
	if o == nil || o.Hook == nil {
		return nil, false
	}
	return o.Hook, true
}

// HasHook returns a boolean if a field has been set.
func (o *PasswordCredential) HasHook() bool {
	if o != nil && o.Hook != nil {
		return true
	}

	return false
}

// SetHook gets a reference to the given PasswordCredentialHook and assigns it to the Hook field.
func (o *PasswordCredential) SetHook(v PasswordCredentialHook) {
	o.Hook = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *PasswordCredential) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordCredential) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *PasswordCredential) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *PasswordCredential) SetValue(v string) {
	o.Value = &v
}

func (o PasswordCredential) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Hash != nil {
		toSerialize["hash"] = o.Hash
	}
	if o.Hook != nil {
		toSerialize["hook"] = o.Hook
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *PasswordCredential) UnmarshalJSON(bytes []byte) (err error) {
	varPasswordCredential := _PasswordCredential{}

	err = json.Unmarshal(bytes, &varPasswordCredential)
	if err == nil {
		*o = PasswordCredential(varPasswordCredential)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &additionalProperties)
	if err == nil {
		delete(additionalProperties, "hash")
		delete(additionalProperties, "hook")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	} else {
		return err
	}

	return err
}

type NullablePasswordCredential struct {
	value *PasswordCredential
	isSet bool
}

func (v NullablePasswordCredential) Get() *PasswordCredential {
	return v.value
}

func (v *NullablePasswordCredential) Set(val *PasswordCredential) {
	v.value = val
	v.isSet = true
}

func (v NullablePasswordCredential) IsSet() bool {
	return v.isSet
}

func (v *NullablePasswordCredential) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePasswordCredential(val *PasswordCredential) *NullablePasswordCredential {
	return &NullablePasswordCredential{value: val, isSet: true}
}

func (v NullablePasswordCredential) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePasswordCredential) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
