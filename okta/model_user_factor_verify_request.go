/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 5.1.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
)

// UserFactorVerifyRequest struct for UserFactorVerifyRequest
type UserFactorVerifyRequest struct {
	ActivationToken *string `json:"activationToken,omitempty"`
	// Answer to the question
	Answer *string `json:"answer,omitempty"`
	// Base64-encoded attestation from the WebAuthn JavaScript call
	Attestation *string `json:"attestation,omitempty"`
	// Base64-encoded client data from the WebAuthn authenticator
	ClientData *string `json:"clientData,omitempty"`
	// OTP for the next time window
	NextPassCode *int32 `json:"nextPassCode,omitempty"`
	// OTP for the current time window
	PassCode *string `json:"passCode,omitempty"`
	// Base64-encoded registration data from the U2F JavaScript call
	RegistrationData     *string `json:"registrationData,omitempty"`
	StateToken           *string `json:"stateToken,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UserFactorVerifyRequest UserFactorVerifyRequest

// NewUserFactorVerifyRequest instantiates a new UserFactorVerifyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserFactorVerifyRequest() *UserFactorVerifyRequest {
	this := UserFactorVerifyRequest{}
	return &this
}

// NewUserFactorVerifyRequestWithDefaults instantiates a new UserFactorVerifyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserFactorVerifyRequestWithDefaults() *UserFactorVerifyRequest {
	this := UserFactorVerifyRequest{}
	return &this
}

// GetActivationToken returns the ActivationToken field value if set, zero value otherwise.
func (o *UserFactorVerifyRequest) GetActivationToken() string {
	if o == nil || o.ActivationToken == nil {
		var ret string
		return ret
	}
	return *o.ActivationToken
}

// GetActivationTokenOk returns a tuple with the ActivationToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserFactorVerifyRequest) GetActivationTokenOk() (*string, bool) {
	if o == nil || o.ActivationToken == nil {
		return nil, false
	}
	return o.ActivationToken, true
}

// HasActivationToken returns a boolean if a field has been set.
func (o *UserFactorVerifyRequest) HasActivationToken() bool {
	if o != nil && o.ActivationToken != nil {
		return true
	}

	return false
}

// SetActivationToken gets a reference to the given string and assigns it to the ActivationToken field.
func (o *UserFactorVerifyRequest) SetActivationToken(v string) {
	o.ActivationToken = &v
}

// GetAnswer returns the Answer field value if set, zero value otherwise.
func (o *UserFactorVerifyRequest) GetAnswer() string {
	if o == nil || o.Answer == nil {
		var ret string
		return ret
	}
	return *o.Answer
}

// GetAnswerOk returns a tuple with the Answer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserFactorVerifyRequest) GetAnswerOk() (*string, bool) {
	if o == nil || o.Answer == nil {
		return nil, false
	}
	return o.Answer, true
}

// HasAnswer returns a boolean if a field has been set.
func (o *UserFactorVerifyRequest) HasAnswer() bool {
	if o != nil && o.Answer != nil {
		return true
	}

	return false
}

// SetAnswer gets a reference to the given string and assigns it to the Answer field.
func (o *UserFactorVerifyRequest) SetAnswer(v string) {
	o.Answer = &v
}

// GetAttestation returns the Attestation field value if set, zero value otherwise.
func (o *UserFactorVerifyRequest) GetAttestation() string {
	if o == nil || o.Attestation == nil {
		var ret string
		return ret
	}
	return *o.Attestation
}

// GetAttestationOk returns a tuple with the Attestation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserFactorVerifyRequest) GetAttestationOk() (*string, bool) {
	if o == nil || o.Attestation == nil {
		return nil, false
	}
	return o.Attestation, true
}

// HasAttestation returns a boolean if a field has been set.
func (o *UserFactorVerifyRequest) HasAttestation() bool {
	if o != nil && o.Attestation != nil {
		return true
	}

	return false
}

// SetAttestation gets a reference to the given string and assigns it to the Attestation field.
func (o *UserFactorVerifyRequest) SetAttestation(v string) {
	o.Attestation = &v
}

// GetClientData returns the ClientData field value if set, zero value otherwise.
func (o *UserFactorVerifyRequest) GetClientData() string {
	if o == nil || o.ClientData == nil {
		var ret string
		return ret
	}
	return *o.ClientData
}

// GetClientDataOk returns a tuple with the ClientData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserFactorVerifyRequest) GetClientDataOk() (*string, bool) {
	if o == nil || o.ClientData == nil {
		return nil, false
	}
	return o.ClientData, true
}

// HasClientData returns a boolean if a field has been set.
func (o *UserFactorVerifyRequest) HasClientData() bool {
	if o != nil && o.ClientData != nil {
		return true
	}

	return false
}

// SetClientData gets a reference to the given string and assigns it to the ClientData field.
func (o *UserFactorVerifyRequest) SetClientData(v string) {
	o.ClientData = &v
}

// GetNextPassCode returns the NextPassCode field value if set, zero value otherwise.
func (o *UserFactorVerifyRequest) GetNextPassCode() int32 {
	if o == nil || o.NextPassCode == nil {
		var ret int32
		return ret
	}
	return *o.NextPassCode
}

// GetNextPassCodeOk returns a tuple with the NextPassCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserFactorVerifyRequest) GetNextPassCodeOk() (*int32, bool) {
	if o == nil || o.NextPassCode == nil {
		return nil, false
	}
	return o.NextPassCode, true
}

// HasNextPassCode returns a boolean if a field has been set.
func (o *UserFactorVerifyRequest) HasNextPassCode() bool {
	if o != nil && o.NextPassCode != nil {
		return true
	}

	return false
}

// SetNextPassCode gets a reference to the given int32 and assigns it to the NextPassCode field.
func (o *UserFactorVerifyRequest) SetNextPassCode(v int32) {
	o.NextPassCode = &v
}

// GetPassCode returns the PassCode field value if set, zero value otherwise.
func (o *UserFactorVerifyRequest) GetPassCode() string {
	if o == nil || o.PassCode == nil {
		var ret string
		return ret
	}
	return *o.PassCode
}

// GetPassCodeOk returns a tuple with the PassCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserFactorVerifyRequest) GetPassCodeOk() (*string, bool) {
	if o == nil || o.PassCode == nil {
		return nil, false
	}
	return o.PassCode, true
}

// HasPassCode returns a boolean if a field has been set.
func (o *UserFactorVerifyRequest) HasPassCode() bool {
	if o != nil && o.PassCode != nil {
		return true
	}

	return false
}

// SetPassCode gets a reference to the given string and assigns it to the PassCode field.
func (o *UserFactorVerifyRequest) SetPassCode(v string) {
	o.PassCode = &v
}

// GetRegistrationData returns the RegistrationData field value if set, zero value otherwise.
func (o *UserFactorVerifyRequest) GetRegistrationData() string {
	if o == nil || o.RegistrationData == nil {
		var ret string
		return ret
	}
	return *o.RegistrationData
}

// GetRegistrationDataOk returns a tuple with the RegistrationData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserFactorVerifyRequest) GetRegistrationDataOk() (*string, bool) {
	if o == nil || o.RegistrationData == nil {
		return nil, false
	}
	return o.RegistrationData, true
}

// HasRegistrationData returns a boolean if a field has been set.
func (o *UserFactorVerifyRequest) HasRegistrationData() bool {
	if o != nil && o.RegistrationData != nil {
		return true
	}

	return false
}

// SetRegistrationData gets a reference to the given string and assigns it to the RegistrationData field.
func (o *UserFactorVerifyRequest) SetRegistrationData(v string) {
	o.RegistrationData = &v
}

// GetStateToken returns the StateToken field value if set, zero value otherwise.
func (o *UserFactorVerifyRequest) GetStateToken() string {
	if o == nil || o.StateToken == nil {
		var ret string
		return ret
	}
	return *o.StateToken
}

// GetStateTokenOk returns a tuple with the StateToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserFactorVerifyRequest) GetStateTokenOk() (*string, bool) {
	if o == nil || o.StateToken == nil {
		return nil, false
	}
	return o.StateToken, true
}

// HasStateToken returns a boolean if a field has been set.
func (o *UserFactorVerifyRequest) HasStateToken() bool {
	if o != nil && o.StateToken != nil {
		return true
	}

	return false
}

// SetStateToken gets a reference to the given string and assigns it to the StateToken field.
func (o *UserFactorVerifyRequest) SetStateToken(v string) {
	o.StateToken = &v
}

func (o UserFactorVerifyRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ActivationToken != nil {
		toSerialize["activationToken"] = o.ActivationToken
	}
	if o.Answer != nil {
		toSerialize["answer"] = o.Answer
	}
	if o.Attestation != nil {
		toSerialize["attestation"] = o.Attestation
	}
	if o.ClientData != nil {
		toSerialize["clientData"] = o.ClientData
	}
	if o.NextPassCode != nil {
		toSerialize["nextPassCode"] = o.NextPassCode
	}
	if o.PassCode != nil {
		toSerialize["passCode"] = o.PassCode
	}
	if o.RegistrationData != nil {
		toSerialize["registrationData"] = o.RegistrationData
	}
	if o.StateToken != nil {
		toSerialize["stateToken"] = o.StateToken
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *UserFactorVerifyRequest) UnmarshalJSON(bytes []byte) (err error) {
	varUserFactorVerifyRequest := _UserFactorVerifyRequest{}

	err = json.Unmarshal(bytes, &varUserFactorVerifyRequest)
	if err == nil {
		*o = UserFactorVerifyRequest(varUserFactorVerifyRequest)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &additionalProperties)
	if err == nil {
		delete(additionalProperties, "activationToken")
		delete(additionalProperties, "answer")
		delete(additionalProperties, "attestation")
		delete(additionalProperties, "clientData")
		delete(additionalProperties, "nextPassCode")
		delete(additionalProperties, "passCode")
		delete(additionalProperties, "registrationData")
		delete(additionalProperties, "stateToken")
		o.AdditionalProperties = additionalProperties
	} else {
		return err
	}

	return err
}

type NullableUserFactorVerifyRequest struct {
	value *UserFactorVerifyRequest
	isSet bool
}

func (v NullableUserFactorVerifyRequest) Get() *UserFactorVerifyRequest {
	return v.value
}

func (v *NullableUserFactorVerifyRequest) Set(val *UserFactorVerifyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUserFactorVerifyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUserFactorVerifyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserFactorVerifyRequest(val *UserFactorVerifyRequest) *NullableUserFactorVerifyRequest {
	return &NullableUserFactorVerifyRequest{value: val, isSet: true}
}

func (v NullableUserFactorVerifyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserFactorVerifyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
