/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 5.1.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
)

// Office365Domain struct for Office365Domain
type Office365Domain struct {
	Index *int32 `json:"index,omitempty"`
	// The domain for your Office 365 account
	Name                 *string `json:"name,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Office365Domain Office365Domain

// NewOffice365Domain instantiates a new Office365Domain object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOffice365Domain() *Office365Domain {
	this := Office365Domain{}
	return &this
}

// NewOffice365DomainWithDefaults instantiates a new Office365Domain object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOffice365DomainWithDefaults() *Office365Domain {
	this := Office365Domain{}
	return &this
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *Office365Domain) GetIndex() int32 {
	if o == nil || o.Index == nil {
		var ret int32
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Office365Domain) GetIndexOk() (*int32, bool) {
	if o == nil || o.Index == nil {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *Office365Domain) HasIndex() bool {
	if o != nil && o.Index != nil {
		return true
	}

	return false
}

// SetIndex gets a reference to the given int32 and assigns it to the Index field.
func (o *Office365Domain) SetIndex(v int32) {
	o.Index = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Office365Domain) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Office365Domain) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Office365Domain) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Office365Domain) SetName(v string) {
	o.Name = &v
}

func (o Office365Domain) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Index != nil {
		toSerialize["index"] = o.Index
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *Office365Domain) UnmarshalJSON(bytes []byte) (err error) {
	varOffice365Domain := _Office365Domain{}

	err = json.Unmarshal(bytes, &varOffice365Domain)
	if err == nil {
		*o = Office365Domain(varOffice365Domain)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &additionalProperties)
	if err == nil {
		delete(additionalProperties, "index")
		delete(additionalProperties, "name")
		o.AdditionalProperties = additionalProperties
	} else {
		return err
	}

	return err
}

type NullableOffice365Domain struct {
	value *Office365Domain
	isSet bool
}

func (v NullableOffice365Domain) Get() *Office365Domain {
	return v.value
}

func (v *NullableOffice365Domain) Set(val *Office365Domain) {
	v.value = val
	v.isSet = true
}

func (v NullableOffice365Domain) IsSet() bool {
	return v.isSet
}

func (v *NullableOffice365Domain) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOffice365Domain(val *Office365Domain) *NullableOffice365Domain {
	return &NullableOffice365Domain{value: val, isSet: true}
}

func (v NullableOffice365Domain) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOffice365Domain) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
