/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 5.1.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"reflect"
	"strings"
)

// UserFactorU2F struct for UserFactorU2F
type UserFactorU2F struct {
	UserFactor
	Profile              *UserFactorU2FProfile `json:"profile,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UserFactorU2F UserFactorU2F

// NewUserFactorU2F instantiates a new UserFactorU2F object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserFactorU2F() *UserFactorU2F {
	this := UserFactorU2F{}
	return &this
}

// NewUserFactorU2FWithDefaults instantiates a new UserFactorU2F object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserFactorU2FWithDefaults() *UserFactorU2F {
	this := UserFactorU2F{}
	return &this
}

// GetProfile returns the Profile field value if set, zero value otherwise.
func (o *UserFactorU2F) GetProfile() UserFactorU2FProfile {
	if o == nil || o.Profile == nil {
		var ret UserFactorU2FProfile
		return ret
	}
	return *o.Profile
}

// GetProfileOk returns a tuple with the Profile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserFactorU2F) GetProfileOk() (*UserFactorU2FProfile, bool) {
	if o == nil || o.Profile == nil {
		return nil, false
	}
	return o.Profile, true
}

// HasProfile returns a boolean if a field has been set.
func (o *UserFactorU2F) HasProfile() bool {
	if o != nil && o.Profile != nil {
		return true
	}

	return false
}

// SetProfile gets a reference to the given UserFactorU2FProfile and assigns it to the Profile field.
func (o *UserFactorU2F) SetProfile(v UserFactorU2FProfile) {
	o.Profile = &v
}

func (o UserFactorU2F) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedUserFactor, errUserFactor := json.Marshal(o.UserFactor)
	if errUserFactor != nil {
		return []byte{}, errUserFactor
	}
	errUserFactor = json.Unmarshal([]byte(serializedUserFactor), &toSerialize)
	if errUserFactor != nil {
		return []byte{}, errUserFactor
	}
	if o.Profile != nil {
		toSerialize["profile"] = o.Profile
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *UserFactorU2F) UnmarshalJSON(bytes []byte) (err error) {
	type UserFactorU2FWithoutEmbeddedStruct struct {
		Profile *UserFactorU2FProfile `json:"profile,omitempty"`
	}

	varUserFactorU2FWithoutEmbeddedStruct := UserFactorU2FWithoutEmbeddedStruct{}

	err = json.Unmarshal(bytes, &varUserFactorU2FWithoutEmbeddedStruct)
	if err == nil {
		varUserFactorU2F := _UserFactorU2F{}
		varUserFactorU2F.Profile = varUserFactorU2FWithoutEmbeddedStruct.Profile
		*o = UserFactorU2F(varUserFactorU2F)
	} else {
		return err
	}

	varUserFactorU2F := _UserFactorU2F{}

	err = json.Unmarshal(bytes, &varUserFactorU2F)
	if err == nil {
		o.UserFactor = varUserFactorU2F.UserFactor
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &additionalProperties)
	if err == nil {
		delete(additionalProperties, "profile")

		// remove fields from embedded structs
		reflectUserFactor := reflect.ValueOf(o.UserFactor)
		for i := 0; i < reflectUserFactor.Type().NumField(); i++ {
			t := reflectUserFactor.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	} else {
		return err
	}

	return err
}

type NullableUserFactorU2F struct {
	value *UserFactorU2F
	isSet bool
}

func (v NullableUserFactorU2F) Get() *UserFactorU2F {
	return v.value
}

func (v *NullableUserFactorU2F) Set(val *UserFactorU2F) {
	v.value = val
	v.isSet = true
}

func (v NullableUserFactorU2F) IsSet() bool {
	return v.isSet
}

func (v *NullableUserFactorU2F) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserFactorU2F(val *UserFactorU2F) *NullableUserFactorU2F {
	return &NullableUserFactorU2F{value: val, isSet: true}
}

func (v NullableUserFactorU2F) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserFactorU2F) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
